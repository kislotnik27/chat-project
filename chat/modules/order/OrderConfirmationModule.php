<?php
namespace Modules\OrderConfirmation;

use PDO;
use Longman\TelegramBot\Request;

class OrderConfirmationModule {
    private $pdo;

    public function __construct($pdo) {
        $this->pdo = $pdo;
        file_put_contents(__DIR__ . '/order_confirmation_debug.log', 'OrderConfirmationModule instantiated.' . PHP_EOL, FILE_APPEND);
    }

    public function handleMessage($user_id, $text) {
        file_put_contents(__DIR__ . '/order_confirmation_debug.log', 'Handling message: ' . $text . ' for User ID: ' . $user_id . PHP_EOL, FILE_APPEND);
        $order_number = $this->extractOrderNumber($text);
        if ($order_number) {
            file_put_contents(__DIR__ . '/order_confirmation_debug.log', 'Extracted order number: ' . $order_number . PHP_EOL, FILE_APPEND);
            if ($this->isOrderValid($user_id, $order_number)) {
                file_put_contents(__DIR__ . '/order_confirmation_debug.log', 'Order is valid.' . PHP_EOL, FILE_APPEND);
                $order = $this->getOrder($user_id, $order_number);
                switch ($order['funnel_stage']) {
                    case 'order_confirmation':
                        $this->handleOrderConfirmation($user_id, $order_number, $text);
                        break;
                    case 'payment_method':
                        $this->handlePaymentMethod($user_id, $order_number, $text);
                        break;
                }
            } else {
                $this->sendInvalidOrderMessage($user_id);
                $this->updateUserStatus($user_id, 'manual');
            }
        } else {
            if ($text == '–¢–∞–∫' || $text == '–ù—ñ') {
                $this->handleCallbackQuery($text, $user_id);
            } elseif ($text == '–í–∞—Ä—ñ–∞–Ω—Ç 1' || $text == '–í–∞—Ä—ñ–∞–Ω—Ç 2') {
                $this->handlePaymentMethod($user_id, null, $text);
                $order_number = $this->getOrderNumberByUser($user_id);
                if ($order_number) {
                    $this->updateFunnelStage($user_id, $order_number, 'waiting_payment');
                }
            } elseif (strtolower($text) == '—Ç–æ–≤–∞—Ä') {
                // –î–æ–±–∞–≤–∏–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö
                $order_number = $this->getOrderNumberByUser($user_id);
                if ($order_number) {

                    $this->sendProductDetails($user_id, $order_number);
                    $this->sendMessage($user_id, '–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.');
                } else {
                    $this->sendMessage($user_id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.');
                }
            }
        }
    }

    public function handleCallbackQuery($callback_data, $user_id) {
        file_put_contents(__DIR__ . '/order_confirmation_debug.log', 'Received callback query: ' . $callback_data . ' for User ID: ' . $user_id . PHP_EOL, FILE_APPEND);

        if ($callback_data == '–¢–∞–∫') {
            $order_number = $this->getOrderNumberByUser($user_id);
            if ($order_number) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
                //$this->sendProductDetails($user_id, $order_number); 
                $this->updateFunnelStage($user_id, $order_number, 'choice_payment');
                $this->sendPaymentMethodMessage($user_id);
            }
        } elseif ($callback_data == '–ù—ñ') {
            $this->updateUserStatus($user_id, 'manual');
        }
    }

    private function getOrderNumberByUser($user_id) {
        $stmt = $this->pdo->prepare("SELECT order_number FROM orders WHERE user_id = ? AND status = 'order_confirmation'");
        $stmt->execute([$user_id]);
        return $stmt->fetchColumn();
    }

    private function extractOrderNumber($text) {
        if (preg_match('/\/start order_(\d+)/', $text, $matches)) {
            return $matches[1];
        }
        return null;
    }

    private function isOrderValid($user_id, $order_number) {
        $stmt = $this->pdo->prepare("SELECT * FROM orders WHERE order_number = ?");
        $stmt->execute([$order_number]);
        $order = $stmt->fetch(PDO::FETCH_ASSOC);
        file_put_contents(__DIR__ . '/order_confirmation_debug.log', 'Order validation. User ID: ' . $user_id . ', Order Number: ' . $order_number . ', Valid: ' . ($order && $order['user_id'] == $user_id ? 'true' : 'false') . PHP_EOL, FILE_APPEND);
        return $order && $order['user_id'] == $user_id;
    }

    private function getOrder($user_id, $order_number) {
        $stmt = $this->pdo->prepare("SELECT * FROM orders WHERE user_id = ? AND order_number = ?");
        $stmt->execute([$user_id, $order_number]);
        $order = $stmt->fetch(PDO::FETCH_ASSOC);
        file_put_contents(__DIR__ . '/order_confirmation_debug.log', 'Fetched order: ' . print_r($order, true) . PHP_EOL, FILE_APPEND);
        return $order;
    }

    private function handleOrderConfirmation($user_id, $order_number, $text) {
        $this->sendOrderConfirmationMessage($user_id, $order_number);
        $this->sendProductDetails($user_id, $order_number);
        file_put_contents(__DIR__ . '/order_confirmation_debug.log', 'Sent order confirmation message to User ID: ' . $user_id . ' for Order Number: ' . $order_number . PHP_EOL, FILE_APPEND);
    }

    private function handlePaymentMethod($user_id, $order_number, $text) {
        if ($text == '–í–∞—Ä—ñ–∞–Ω—Ç 1' || $text == '–í–∞—Ä—ñ–∞–Ω—Ç 2') {
            $this->sendCardNumberMessage($user_id);
        } else {
            $this->sendPaymentMethodMessage($user_id);
        }
    }

    private function sendProductDetails($user_id, $order_number) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        $orderInfo = $this->getOrderInfo($order_number);
        foreach ($orderInfo['purchases'] as $product) {
            $productName = $product['product_name'];
            $productPrice = $product['price'] . ' –≥—Ä–Ω';
            $productImage = $product['product_image_url'];
            $productImage_url = "https://elaliza.ua/files/fromcms/$productImage";

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É –≤ —á–∞—Ç
            $data = [
                'chat_id' => $user_id,
                'photo' => $productImage_url,
                'caption' => "–¢–æ–≤–∞—Ä: {$productName}\n–¶–µ–Ω–∞: {$productPrice}"
            ];
            Request::sendPhoto($data);
        }
    }

    private function updateFunnelStage($user_id, $order_number, $stage) {
        $stmt = $this->pdo->prepare("UPDATE orders SET funnel_stage = ? WHERE user_id = ? AND order_number = ?");
        $stmt->execute([$stage, $user_id, $order_number]);
    }

    private function sendOrderConfirmationMessage($user_id, $order_number) {
        $data = [
            'chat_id' => $user_id,
            'text' => "–í—ñ—Ç–∞—é. –í–∏ –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ-{$order_number} –Ω–∞ —Å–∞–π—Ç—ñ ELALIZA.)  –í–∞–º –∑—Ä—É—á–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ?)",
            'reply_markup' => json_encode([
                'keyboard' => [
                    ['–¢–∞–∫', '–ù—ñ']
                ],
                'one_time_keyboard' => true,
                'resize_keyboard' => true
            ])
        ];
        Request::sendMessage($data);
    }

    private function sendPaymentMethodMessage($user_id) {
        $data = [
            'chat_id' => $user_id,
            'text' => "–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:
            1. –ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É
            2. –ù–∞–∫–ª–∞–¥–Ω–∏–π –ø–ª–∞—Ç—ñ–∂ –∑ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–æ—é 50 –≥—Ä–Ω",
            'reply_markup' => json_encode([
                'keyboard' => [
                    ['–í–∞—Ä—ñ–∞–Ω—Ç 1', '–í–∞—Ä—ñ–∞–Ω—Ç 2']
                ],
                'one_time_keyboard' => true,
                'resize_keyboard' => true
            ])
        ];
        Request::sendMessage($data);
    }

    private function sendCardNumberMessage($user_id) {
        $data = [
            'chat_id' => $user_id,
            'text' => "–î–æ–±—Ä–µüíõ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Å–ø–ª–∞—Ç–∏: 

5169 3305 2250 3611

–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ 
–ö—É—Ä–¥–æ–≥–ª–æ –û–ª–µ–∫—Å–∞–Ω–¥—Ä 


–Ø–∫ –æ–ø–ª–∞—Ç–∏—Ç–µ, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫—Ä—ñ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è. –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—èüíôüíõ"
        ];
        Request::sendMessage($data);
    }

    private function sendInvalidOrderMessage($user_id) {
        $data = [
            'chat_id' => $user_id,
            'text' => "–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ú—ã –ø–æ–¥–∫–ª—é—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º."
        ];
        Request::sendMessage($data);
    }

    private function sendMessageToManager($user_id, $order_number) {
        $manager_chat_id = 'ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞'; // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —á–∞—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        $data = [
            'chat_id' => $manager_chat_id,
            'text' => "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {$user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä {$order_number}, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–π –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        ];
        Request::sendMessage($data);
    }

    private function updateUserStatus($user_id, $status) {
        $stmt = $this->pdo->prepare("UPDATE users SET status = ? WHERE chat_id = ?");
        $stmt->execute([$status, $user_id]);
    }

    public function sendMessage($chat_id, $message) {
        $data = [
            'chat_id' => $chat_id,
            'text' => $message,
        ];

        return Request::sendMessage($data);
    }

    public function getOrderInfo($order_number) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ —Å API
        $order_data = file_get_contents("https://elaliza.ua/public_api/get_order.php?order_id=$order_number");
        $order = json_decode($order_data, true);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API
        if (!isset($order['error'])) {
            return $order;
        } else {
            return ['error' => $order['error']];
        }
    }
}
?>
